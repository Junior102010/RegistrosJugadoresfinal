@page "/Jugadores/Edit/{JugadorId:int}"

@using RegistrosJugadores.Models
@inject RegistrosJugadores.Services.JugadoresServices jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Modificar</PageTitle>

<EditForm Model="@Jugador" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Jugador</h5>
            </div>

            <div class="card-body">
                <!-- Mensaje -->
                @if (!string.IsNullOrEmpty(mensaje))
                {
                    <div class="alert @(tipoMensaje == "success" ? "alert-success" : "alert-danger")">
                        @mensaje
                    </div>
                }

                <!-- Nombres -->
                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Jugador.Nombres" />
                    <ValidationMessage For="@(() => Jugador.Nombres)" />
                </div>

                <!-- Partidas -->
                <div class="mb-3">
                    <label class="form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.Partidas" />
                    <ValidationMessage For="@(() => Jugador.Partidas)" />
                </div>
            </div>
            <div class="EspacioArriba" </div>
            <div class="custom-th-spacing">
                <a href="/Jugadores/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="custom-btn-spacing"> Modificar</button>
                <button type="button" class="btn btn-danger bi bi-trash m-3" @onclick="async () => await Eliminar()"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int JugadorId { get; set; }

    public Jugadores Jugador { get; set; } = new();

    private string? mensaje;
    private string? tipoMensaje;

    protected override async Task OnInitializedAsync()
    {
        var encontrado = await jugadoresService.Buscar(JugadorId);
        if (encontrado is not null)
            Jugador = encontrado;
        else
        {
            mensaje = "No se encontró el jugador.";
            tipoMensaje = "error";
        }
    }

    public async Task Modificar()
    {
        var ok = await jugadoresService.Guardar(Jugador);
        if (ok)
        {
            mensaje = "Se ha modificado correctamente";
            tipoMensaje = "success";
        }
        else
        {
            mensaje = "No se ha podido modificar correctamente";
            tipoMensaje = "error";
        }
    }

    private async Task Eliminar()
    {
        var ok = await jugadoresService.Eliminar(Jugador.JugadorId);
        if (ok)
        {
            mensaje = "Se ha eliminado correctamente";
            tipoMensaje = "success";
            navigationManager.NavigateTo("/Jugadores/Index");
        }
        else
        {
            mensaje = "No se ha podido eliminar correctamente";
            tipoMensaje = "error";
        }
    }
}
